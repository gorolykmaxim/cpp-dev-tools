#ifndef SQL_KEYWORDS_H
#define SQL_KEYWORDS_H

#include <QStringList>

const QStringList kSqlKeywords = {
    "ABORT",
    "ALL",
    "ALLOCATE",
    "ANALYSE",
    "ANALYZE",
    "AND",
    "ANY",
    "AS",
    "ASC",
    "BETWEEN",
    "BINARY",
    "BIT",
    "BOTH",
    "BY",
    "CASE",
    "CAST",
    "CHAR",
    "CHARACTER",
    "CHECK",
    "CLUSTER",
    "COALESCE",
    "COLLATE",
    "COLLATION",
    "COLUMN",
    "CONSTRAINT",
    "COPY",
    "CROSS",
    "CURRENT",
    "CURRENT_CATALOG",
    "CURRENT_DATE",
    "CURRENT_DB",
    "CURRENT_SCHEMA",
    "CURRENT_SID",
    "CURRENT_TIME",
    "CURRENT_TIMESTAMP",
    "CURRENT_USER",
    "CURRENT_USERID",
    "CURRENT_USEROID",
    "DEALLOCATE",
    "DEC",
    "DECIMAL",
    "DECODE",
    "DEFAULT",
    "DESC",
    "DISTINCT",
    "DISTRIBUTE",
    "DO",
    "ELSE",
    "END",
    "EXCEPT",
    "EXCLUDE",
    "EXISTS",
    "EXPLAIN",
    "EXPRESS",
    "EXTEND",
    "EXTERNAL",
    "EXTRACT",
    "FIRST",
    "FLOAT",
    "FOLLOWING",
    "FOR",
    "FOREIGN",
    "FROM",
    "FULL",
    "FUNCTION",
    "GENSTATS",
    "GLOBAL",
    "GROUP",
    "HAVING",
    "IDENTIFIER_CASE",
    "ILIKE",
    "IN",
    "INDEX",
    "INITIALLY",
    "INNER",
    "INOUT",
    "INTERSECT",
    "INTERVAL",
    "INTO",
    "LEADING",
    "LEFT",
    "LIKE",
    "LIMIT",
    "LOAD",
    "LOCAL",
    "LOCK",
    "MINUS",
    "MOVE",
    "NATURAL",
    "NCHAR",
    "NEW",
    "NOT",
    "NOTNULL",
    "NULL",
    "NULLS",
    "NUMERIC",
    "NVL",
    "NVL2",
    "OFF",
    "OFFSET",
    "OLD",
    "ON",
    "ONLINE",
    "ONLY",
    "OR",
    "ORDER",
    "OTHERS",
    "OUT",
    "OUTER",
    "OVER",
    "OVERLAPS",
    "PARTITION",
    "POSITION",
    "PRECEDING",
    "PRECISION",
    "PRESERVE",
    "PRIMARY",
    "RESET",
    "REUSE",
    "RIGHT",
    "ROWS",
    "SELECT",
    "SESSION_USER",
    "SETOF",
    "SHOW",
    "SOME",
    "TABLE",
    "THEN",
    "TIES",
    "TIME",
    "TIMESTAMP",
    "TO",
    "TRAILING",
    "TRANSACTION",
    "TRIGGER",
    "TRIM",
    "UNBOUNDED",
    "UNION",
    "UNIQUE",
    "USER",
    "USING",
    "VACUUM",
    "VARCHAR",
    "VERBOSE",
    "VERSION",
    "VIEW",
    "WHEN",
    "WHERE",
    "WITH",
    "WRITE",
    "RESET",
    "REUSE",
};
const QStringList kQmlKeywords = {
    "import", "true", "false", "property", "alias", "signal", "required",
};
const QStringList kCppKeywords = {
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "bool",
    "break",
    "case",
    "catch",
    "char",
    "char8_t",
    "char16_t",
    "char32_t",
    "class",
    "compl",
    "concept",
    "const",
    "consteval",
    "constexpr",
    "constinit",
    "const_cast",
    "continue",
    "co_await",
    "co_return",
    "co_yield",
    "decltype",
    "default",
    "delete",
    "do",
    "double",
    "dynamic_cast",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "float",
    "for",
    "friend",
    "goto",
    "if",
    "inline",
    "int",
    "long",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast",
    "requires",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "static_assert",
    "static_cast",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "unsigned",
    "using",
    "virtual",
    "void",
    "volatile",
    "wchar_t",
    "while",
    "xor",
    "xor_eq",
};
const QStringList kCPreprocessorKeywords = {
    "#define", "#elif",   "#else",    "#endif", "#error",  "#if",    "#ifdef",
    "#ifndef", "#import", "#include", "#line",  "#pragma", "#undef", "#using",
};
const QStringList kJsKeywords = {
    "abstract",     "arguments", "await",    "boolean",    "break",
    "byte",         "case",      "catch",    "char",       "class",
    "const",        "continue",  "debugger", "default",    "delete",
    "do",           "double",    "else",     "enum",       "eval",
    "export",       "extends",   "false",    "final",      "finally",
    "float",        "for",       "function", "goto",       "if",
    "implements",   "import",    "in",       "instanceof", "int",
    "interface",    "let",       "long",     "native",     "new",
    "null",         "package",   "private",  "protected",  "public",
    "return",       "short",     "static",   "super",      "switch",
    "synchronized", "this",      "throw",    "throws",     "transient",
    "true",         "try",       "typeof",   "var",        "void",
    "volatile",     "while",     "with",     "yield",
};

#endif  // SQL_KEYWORDS_H
